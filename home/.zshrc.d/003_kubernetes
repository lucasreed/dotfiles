export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

alias k="kubectl"
alias kg="kubectl get"
alias kd="kubectl describe"
alias kgn="kubectl get namespaces"
alias kgs="kubectl get services"
alias kgp="kubectl get pods"
alias kgd="kubectl get deployments"
alias kgds="kubectl get daemonsets"
alias kgi="kubectl get ing"
alias kgno="kubectl get nodes -L failure-domain.beta.kubernetes.io/zone -L node.kubernetes.io/instance-type"
alias kevents="kubectl get events --sort-by=.metadata.creationTimestamp"
alias cert_status='kubectl get certificate -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name,NOT_BEFORE:.status.notBefore,NOT_AFTER:.status.notAfter"'

kc() {
  kubectl -n "${namespace}" $@
}

generate_kubeconfig_from_sa() {
  namespace="$1"
  serviceaccount="$2"

  sa_secret_name=$(kc get serviceaccount "${serviceaccount}" -o 'jsonpath={.secrets[0].name}')

  context_name="$(kubectl config current-context)"
  kubeconfig_old="${KUBECONFIG}"
  cluster_name="$(kubectl config view -o "jsonpath={.contexts[?(@.name==\"${context_name}\")].context.cluster}")"
  server_name="$(kubectl config view -o "jsonpath={.clusters[?(@.name==\"${cluster_name}\")].cluster.server}")"
  cacert="$(kc get secret "${sa_secret_name}" -o "jsonpath={.data.ca\.crt}" | base64 --decode)"
  token="$(kc get secret "${sa_secret_name}" -o "jsonpath={.data.token}" | base64 --decode)"

  export KUBECONFIG="$(mktemp)"
  kubectl config set-credentials "${serviceaccount}" --token="${token}" >/dev/null
  ca_crt="$(mktemp)"; echo "${cacert}" > ${ca_crt}
  kubectl config set-cluster "${cluster_name}" --server="${server_name}" --certificate-authority="$ca_crt" --embed-certs >/dev/null
  kubectl config set-context "${cluster_name}" --cluster="${cluster_name}" --user="${serviceaccount}" >/dev/null
  kubectl config use-context "${cluster_name}" >/dev/null

  KUBECONFIG_DATA=$(cat "${KUBECONFIG}")
  rm ${KUBECONFIG}
  echo "${KUBECONFIG_DATA}"
  export KUBECONFIG="${kubeconfig_old}"
}

